{"version":3,"file":"static/js/716.f45668f6.chunk.js","mappings":"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","sources":["views/gam/implementation/IntegrationImplementation.js"],"sourcesContent":["import { CCard, CCardBody, CCol, CRow } from '@coreui/react';\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Tabs, Tab, Alert } from 'react-bootstrap';\n\nimport '../../../scss/_custom.scss';\n\nconst TOTAL_ITEMS = 11;\n\nconst IntegrationImplementation = () => {\n  const [integrationImplementation, setCheckedItems] = useState({});\n  const [showMessage, setShowMessage] = useState(false);\n  const [integrationPercentage, setSelectedPercentageState] = useState(0);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const savedItems = localStorage.getItem('integrationImplementation');\n    if (savedItems) {\n      setCheckedItems(JSON.parse(savedItems));\n    }\n\n    const savedPercentage = localStorage.getItem('integrationPercentage');\n    if (savedPercentage) {\n      setSelectedPercentageState(parseFloat(savedPercentage));\n    }\n  }, []);\n\n  const handleCheckboxChange = (event) => {\n    const itemName = event.target.name;\n    const isChecked = event.target.checked;\n    setCheckedItems((prevCheckedItems) => {\n      const checkedItemsManagerialFeasibility = {\n        ...prevCheckedItems,\n        [itemName]: isChecked,\n      };\n      localStorage.setItem('integrationImplementation', JSON.stringify(checkedItemsManagerialFeasibility));\n      return checkedItemsManagerialFeasibility;\n    });\n  };\n\n  useEffect(() => {\n    const selectedOptions = Object.values(integrationImplementation).filter((value) => value).length;\n    const percentage = (selectedOptions / TOTAL_ITEMS) * 100;\n    if (TOTAL_ITEMS > 0) {\n      setSelectedPercentageState(percentage.toFixed(1));\n      dispatch({ type: 'SET_INTEGATION_PERCENTAGE', payload: percentage.toFixed(1) });\n      localStorage.setItem('integrationPercentage', percentage.toFixed(1));\n    }\n\n    setShowMessage(percentage === 100);\n  }, [integrationImplementation, dispatch]);\n\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardBody>\n              <h4>Decisões de Integração</h4>\n              <hr />\n              <div>\n                <Alert variant=\"success\">\n                  Percentual de opções selecionadas: {localStorage.getItem('integrationPercentage') || '0.0'}%\n                </Alert>\n              </div>\n              <hr />\n              <p>\n              A fase de Implementação Prática no Guidelines for Adopting Micro-Frontends (GAM)\n              marca a transição do planejamento teórico para a aplicação concreta da arquitetura de\n              Micro-Frontends. Dividida em decisões Operacionais e de Integração, esta etapa visa\n              guiar os arquitetos e desenvolvedores na execução efetiva do paradigma arquitetônico.\n              As estratégias delineadas nas fases anteriores serão agora aplicadas no Projeto Piloto,\n              representando um ambiente controlado para validar e consolidar as decisões tomadas previamente. \n              A implementação prática é o ponto em que as escolhas teóricas começam a se\n              materializar, e cada decisão tem impacto direto na eficiência, escalabilidade e manutenibilidade do sistema. A\n              Figura abaixo ilustra o fluxo das decisões operacionais e de integração\n              durante esta fase.\n              </p>\n          </CCardBody>\n        </CCard>\n        <CCard className=\"mb-4\">\n          <CCardBody>\n            <section>\n              <Tabs defaultActiveKey=\"alignment\" id=\"integration-implementation-tabs\" className=\"mb-3\">\n                <Tab eventKey=\"alignment\" title=\"Compatibilidade Tecnológica:\">\n                  <ul className=\"no-bullets\">\n                    <li><em>Objetivo:</em> Garantir que a arquitetura de Micro-Frontends seja compatível com as tecnologias existentes na\n                    infraestrutura da empresa, minimizando conflitos e promovendo uma transição suave.</li>\n                    <li><em>Recomendações:</em></li>\n                    <ul className=\"no-bullets\">\n                      <div>\n                        <label className='ml-2'>\n                          <input className='input-label'\n                            type=\"checkbox\"\n                            name=\"Avaliação da Infraestrutura Atual\"\n                            checked={integrationImplementation['Avaliação da Infraestrutura Atual'] || false}\n                            onChange={handleCheckboxChange}\n                          />\n                          Realizar uma análise detalhada da infraestrutura tecnológica existente, identificando as tecnologias, frameworks e bibliotecas em uso.\n                        </label>\n                      </div>\n                      <div>\n                        <label className='ml-2'>\n                          <input className='input-label'\n                            type=\"checkbox\"\n                            name=\"Identificação de Conflitos Potenciais\"\n                            checked={integrationImplementation['Identificação de Conflitos Potenciais'] || false}\n                            onChange={handleCheckboxChange}\n                          />\n                          Identificação de Conflitos Potenciais: Identificar possíveis conflitos entre as tecnologias utilizadas\n                          atualmente e aquelas associadas à arquitetura de Micro-Frontends.\n                        </label>\n                      </div>\n                      <div>\n                        <label className='ml-2'>\n                          <input className='input-label'\n                            type=\"checkbox\"\n                            name=\"Padronização de Tecnologias\"\n                            checked={integrationImplementation['Padronização de Tecnologias'] || false}\n                            onChange={handleCheckboxChange}\n                          />\n                          Considerar a padronização de tecnologias que são comuns tanto na infraestrutura atual quanto na arquitetura de Micro-Frontends para facilitar a integração.\n                        </label>\n                      </div>\n                      <div>\n                        <label className='ml-2'>\n                          <input className='input-label'\n                            type=\"checkbox\"\n                            name=\"Testes de Compatibilidade\"\n                            checked={integrationImplementation['Testes de Compatibilidade'] || false}\n                            onChange={handleCheckboxChange}\n                          />\n                          Implementar testes específicos usando o projeto piloto para verificar a\n                          compatibilidade entre os componentes de Micro-Frontends e a infraestrutura existente.\n                        </label>\n                      </div>\n                    </ul>\n                    <div className=\"blue-box-2\">\n                      <strong>Exemplo Prático:</strong> \n                      Suponha que a empresa utilize o Angular como framework principal em seus sistemas\n                      existentes. Ao iniciar a adoção de Micro-Frontends, a equipe de análise de compatibilidade avalia a versão\n                      específica do Angular em uso e confirma sua compatibilidade com os requisitos do Micro-Frontend. Além disso, ao\n                      identificar a necessidade de uma biblioteca de gerenciamento de estado, a equipe opta por padronizar o uso do\n                      Redux, que é amplamente aceito tanto na infraestrutura atual quanto na arquitetura de Micro-Frontends. Durante\n                      o projeto piloto, são conduzidos testes específicos para verificar a interoperabilidade entre os Micro-Frontends\n                      e os serviços legados, garantindo uma transição suave e minimizando conflitos.\n                    </div>\n                  </ul>\n                </Tab>\n                <Tab eventKey=\"costs\" title=\"Desafios de Integração\">\n                  <ul className=\"no-bullets\">\n                    <li><em>Objetivo:</em> Identificar e abordar proativamente os desafios de integração que possam surgir durante a\n                    adoção da arquitetura de Micro-Frontends</li>\n                    <li><em>Recomendações:</em></li>\n                    <ul className=\"no-bullets\">\n                      <div>\n                        <label className='ml-2'>\n                          <input className='input-label'\n                            type=\"checkbox\"\n                            name=\"Mapeamento de Interfaces\"\n                            checked={integrationImplementation['Mapeamento de Interfaces'] || false}\n                            onChange={handleCheckboxChange}\n                          />\n                          Mapeamento de Interfaces: Realizar um mapeamento claro das interfaces entre os Micro-Frontends e outros\n                          componentes do sistema.\n                        </label>\n                      </div>\n                      <div>\n                        <label className='ml-2'>\n                          <input className='input-label'\n                            type=\"checkbox\"\n                            name=\"Definição de Contratos\"\n                            checked={integrationImplementation['Definição de Contratos'] || false}\n                            onChange={handleCheckboxChange}\n                          />\n                          Definição de Contratos: Estabelecer contratos claros e documentados entre os Micro-Frontends e os serviços\n                          backend, garantindo consistência nas interações.\n                        </label>\n                      </div>\n                      <div>\n                        <label className='ml-2'>\n                          <input className='input-label'\n                            type=\"checkbox\"\n                            name=\"Monitoramento Contínuo\"\n                            checked={integrationImplementation['Monitoramento Contínuo'] || false}\n                            onChange={handleCheckboxChange}\n                          />\n                          Monitoramento Contínuo: Implemente mecanismos de monitoramento contínuo para identificar e resolver\n                          rapidamente problemas de integração.\n                        </label>\n                      </div>\n                    </ul>\n                    <div className=\"blue-box-2\">\n                      <strong>Exemplo Prático:</strong> \n                      Durante a implementação de Micro-Frontends, um desafio de integração foi identificado\n                      na comunicação entre um Micro-Frontend específico e um serviço backend essencial. Utilizando o mapeamento de\n                      interfaces previamente documentado, a equipe consegue rapidamente diagnosticar o problema e atualizar o contrato\n                      de API. O monitoramento contínuo alerta a equipe sobre a anomalia, permitindo uma intervenção rápida e\n                      minimizando o impacto nos usuários finais.\n                    </div>\n                  </ul>\n                </Tab>\n                <Tab eventKey=\"change-management\" title=\"Complexidades Funcionais\">\n                  <ul className=\"no-bullets\">\n                    <li><em>Objetivo:</em> Entender e mitigar as complexidades funcionais associadas à arquitetura de Micro-Frontends,\n                    garantindo a entrega de funcionalidades de forma eficiente.</li>\n                    <li><em>Recomendações:</em></li>\n                    <ul className=\"no-bullets\">\n                      <div>\n                        <label className='ml-2'>\n                          <input className='input-label'\n                            type=\"checkbox\"\n                            name=\"Análise de Requisitos\"\n                            checked={integrationImplementation['Análise de Requisitos'] || false}\n                            onChange={handleCheckboxChange}\n                          />\n                          Análise de Requisitos: Realizar uma análise aprofundada dos requisitos funcionais da aplicação,\n                          identificando possíveis complexidades.\n                        </label>\n                      </div>\n                      <div>\n                        <label className='ml-2'>\n                          <input className='input-label'\n                            type=\"checkbox\"\n                            name=\"Design Modular\"\n                            checked={integrationImplementation['Design Modular'] || false}\n                            onChange={handleCheckboxChange}\n                          />\n                          Design Modular: Adote um design modular para os Micro-Frontends, dividindo a aplicação em componentes\n                          independentes para facilitar o gerenciamento das complexidades.\n                        </label>\n                      </div>\n                      <div>\n                        <label className='ml-2'>\n                          <input className='input-label'\n                            type=\"checkbox\"\n                            name=\"Testes Unitários e de Integração\"\n                            checked={integrationImplementation['Testes Unitários e de Integração'] || false}\n                            onChange={handleCheckboxChange}\n                          />\n                          Testes Unitários e de Integração: Implementar testes unitários e de integração para validar a funcionalidade\n                          dos Micro-Frontends individualmente e em conjunto.\n                        </label>\n                      </div>\n                      <div>\n                        <label className='ml-2'>\n                          <input className='input-label'\n                            type=\"checkbox\"\n                            name=\"Documentação Clara\"\n                            checked={integrationImplementation['Documentação Clara'] || false}\n                            onChange={handleCheckboxChange}\n                          />\n                          Documentação Clara: Mantenha uma documentação clara e abrangente que descreva as interações funcionais\n                          entre os Micro-Frontends e outros componentes.\n                        </label>\n                      </div>\n                    </ul>\n                    <div className=\"blue-box-2\">\n                      <strong>Exemplo Prático:</strong> \n                      Durante a análise de requisitos foi identificado um requisito funcional complexo\n                      relacionado à gestão de permissões de usuários em diferentes Micro-Frontends. Ao adotar um design modular, a\n                      equipe decide criar um Micro-Frontend dedicado exclusivamente à gestão de permissões. Testes unitários e de\n                      integração são implementados para garantir que essa funcionalidade se integre sem problemas aos demais\n                      Micro-Frontends. A documentação clara detalha os fluxos de interação, simplificando a compreensão da\n                      complexidade funcional pela equipe.\n                    </div>\n                  </ul>\n                </Tab>\n              </Tabs>\n            </section>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n}\n\nexport default IntegrationImplementation;\n"],"names":["IntegrationImplementation","integrationImplementation","setCheckedItems","useState","showMessage","setShowMessage","integrationPercentage","setSelectedPercentageState","dispatch","useDispatch","useEffect","savedItems","localStorage","getItem","JSON","parse","savedPercentage","parseFloat","handleCheckboxChange","event","itemName","target","name","isChecked","checked","prevCheckedItems","checkedItemsManagerialFeasibility","setItem","stringify","percentage","Object","values","filter","value","length","toFixed","type","payload","_jsx","CRow","children","_jsxs","CCol","xs","CCard","className","CCardBody","Alert","variant","Tabs","defaultActiveKey","id","Tab","eventKey","title","onChange"],"sourceRoot":""}