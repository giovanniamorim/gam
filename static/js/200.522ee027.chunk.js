"use strict";(self.webpackChunkgam=self.webpackChunkgam||[]).push([[200],{8820:(e,a,s)=>{s.r(a),s.d(a,{default:()=>r});var i=s(3084),o=(s(9060),s(5648),s(2496));const r=()=>(0,o.jsx)(i.AX,{children:(0,o.jsxs)(i.oV,{xs:12,children:[(0,o.jsxs)(i.u0,{className:"mb-4",children:[(0,o.jsx)(i.Q_,{children:(0,o.jsx)("strong",{children:"GAM"})}),(0,o.jsx)(i.Yj,{children:(0,o.jsxs)("section",{children:[(0,o.jsx)("h3",{children:"Escalabilidade"}),(0,o.jsx)("p",{children:"Esta etapa visa capacitar a aplica\xe7\xe3o a crescer de maneira eficiente e adaptar-se \xe0s demandas vari\xe1veis do ambiente. As principais \xe1reas de foco s\xe3o a adi\xe7\xe3o de novos micro-frontends, o gerenciamento de carga e as estrat\xe9gias de cache."}),(0,o.jsx)("h3",{children:"Adi\xe7\xe3o de Novos Micro-Frontends:"}),(0,o.jsxs)("ul",{children:[(0,o.jsxs)("li",{children:[(0,o.jsx)("strong",{children:"Objetivo:"})," Facilitar a incorpora\xe7\xe3o de novos micro-frontends ao sistema existente."]}),(0,o.jsxs)("li",{children:[(0,o.jsx)("strong",{children:"Recomenda\xe7\xf5es:"}),(0,o.jsxs)("ul",{children:[(0,o.jsx)("li",{children:"Modulariza\xe7\xe3o Din\xe2mica: Desenvolver arquitetura modular que suporte a adi\xe7\xe3o din\xe2mica de novos micro-frontends sem impactar os existentes."}),(0,o.jsx)("li",{children:"Balanceamento de Carga: Implementar sistema de balanceamento de carga autom\xe1tico como servi\xe7os de orquestra\xe7\xe3o, usando ferramentas como Kubernetes, para facilitar o dimensionamento autom\xe1tico com base nas m\xe9tricas de tr\xe1fego."}),(0,o.jsx)("li",{children:"Gest\xe3o de Cache: Adote estrat\xe9gias de cache, como Redis, para armazenar temporariamente as respostas de micro-servi\xe7os, melhorando o throughput da composi\xe7\xe3o de micro-frontends. Explore o armazenamento de DOM de micro-frontends em caches in-memory para reduzir a necessidade de recomposi\xe7\xe3o a cada requisi\xe7\xe3o."})]})]})]}),(0,o.jsxs)("div",{className:"blue-box",children:[" ",(0,o.jsx)("strong",{children:"Exemplo Pr\xe1tico:"}),'Em um cen\xe1rio de com\xe9rcio eletr\xf4nico baseado em micro-frontends, um novo micro-frontend chamado "Recomenda\xe7\xf5es Personalizadas" foi adicionado. Implementa-se um sistema de balanceamento de carga autom\xe1tico com Kubernetes para escalabilidade din\xe2mica com base no tr\xe1fego. Para aprimorar o desempenho, utiliza-se estrat\xe9gias de cache, incluindo Redis, para armazenar temporariamente respostas de micro-servi\xe7os e o DOM de micro-frontends em caches in-memory, reduzindo a necessidade de recomposi\xe7\xe3o a cada requisi\xe7\xe3o.']}),(0,o.jsx)("h3",{children:"Gerenciamento de Carga:"}),(0,o.jsxs)("ul",{children:[(0,o.jsxs)("li",{children:[(0,o.jsx)("strong",{children:"Objetivo:"})," Garantir a efici\xeancia operacional e o desempenho otimizado da aplica\xe7\xe3o, mesmo diante de demandas crescentes."]}),(0,o.jsxs)("li",{children:[(0,o.jsx)("strong",{children:"Recomenda\xe7\xf5es:"}),(0,o.jsxs)("ul",{children:[(0,o.jsx)("li",{children:"Autoescalabilidade na Nuvem: Utilize funcionalidades de autoescalabilidade oferecidas por provedores de nuvem para ajustar dinamicamente a infraestrutura com base nos padr\xf5es de tr\xe1fego. Escolha camadas de computa\xe7\xe3o eficientes, como cont\xeaineres, para r\xe1pida execu\xe7\xe3o, e considere op\xe7\xf5es gerenciadas, como servi\xe7os serverless, para simplificar a operacionaliza\xe7\xe3o da infraestrutura."}),(0,o.jsx)("li",{children:"Previs\xe3o de Carga e Ajuste Manual: Estabelecer uma infraestrutura de linha de base capaz de lidar com cargas previs\xedveis, como vendas da Black Friday, adotando pr\xe1ticas de compara\xe7\xe3o entre diferentes servi\xe7os e op\xe7\xf5es plug-and-play."}),(0,o.jsx)("li",{children:"Otimiza\xe7\xe3o de Lat\xeancia com CDN: Utilizar uma CDN para aumentar a velocidade de entrega das p\xe1ginas da web, reduzindo a lat\xeancia entre o cliente e o conte\xfado solicitado."})]})]})]}),(0,o.jsxs)("div",{className:"blue-box",children:[" ",(0,o.jsx)("strong",{children:"Exemplo Pr\xe1tico:"}),' Para otimizar o desempenho da plataforma de com\xe9rcio eletr\xf4nico, foi aproveitada a autoescalabilidade na nuvem, utilizando servi\xe7os serverless e cont\xeaineres para ajustar dinamicamente a infraestrutura com base em padr\xf5es de tr\xe1fego, garantindo r\xe1pida execu\xe7\xe3o e efici\xeancia operacional. Para lidar com picos previs\xedveis, como as vendas da "Black Friday", estabeleceu-se uma infraestrutura de linha de base com ajustes manuais quando necess\xe1rio, utilizando pr\xe1ticas de compara\xe7\xe3o entre diferentes servi\xe7os e op\xe7\xf5es plug-and-play. Al\xe9m disso, incorporou-se uma CDN para otimizar a lat\xeancia, acelerando a entrega de p\xe1ginas web e aprimorando a experi\xeancia do usu\xe1rio em cen\xe1rios de alta demanda.']}),(0,o.jsx)("h3",{children:"Estrat\xe9gias de Cache:"}),(0,o.jsxs)("ul",{children:[(0,o.jsxs)("li",{children:[(0,o.jsx)("strong",{children:"Objetivo:"})," Otimizar o desempenho da aplica\xe7\xe3o reduzindo a carga nos servidores e acelerando o tempo de resposta."]}),(0,o.jsxs)("li",{children:[(0,o.jsx)("strong",{children:"Recomenda\xe7\xf5es:"}),(0,o.jsxs)("ul",{children:[(0,o.jsx)("li",{children:"Cache de Conte\xfado Est\xe1tico: Implementar cache para conte\xfado est\xe1tico, como imagens, folhas de estilo e scripts, reduzindo a lat\xeancia de carregamento."}),(0,o.jsx)("li",{children:"Cache de Dados Din\xe2micos: Utilizar estrat\xe9gias de cache para dados din\xe2micos, minimizando consultas frequentes ao servidor."}),(0,o.jsx)("li",{children:"Invalida\xe7\xe3o de Cache Eficiente: Implementar m\xe9todos eficazes de invalida\xe7\xe3o de cache para garantir que os usu\xe1rios recebam informa\xe7\xf5es atualizadas."}),(0,o.jsx)("li",{children:"Cache de Respostas: Implementar caches para armazenar temporariamente as respostas de micro-frontends, utilizando solu\xe7\xf5es como Redis, armazenando temporariamente as respostas de micro-servi\xe7os para aumentar o throughput."}),(0,o.jsx)("li",{children:"Armazenamento de DOM em Cache: Armazenar o DOM completo de micro-frontends em caches in-memory para evitar composi\xe7\xe3o a cada requisi\xe7\xe3o."})]})]})]}),(0,o.jsxs)("div",{className:"blue-box",children:[" ",(0,o.jsx)("strong",{children:"Exemplo Pr\xe1tico:"})," Em uma aplica\xe7\xe3o web, introduziu-se caches para conte\xfado est\xe1tico (imagens e estilos), dados din\xe2micos e respostas de micro-frontends e micro-servi\xe7os, utilizando solu\xe7\xf5es como Redis. Essas abordagens reduzem a lat\xeancia de carregamento, minimizam consultas frequentes aos servidores e aumentam o throughput. Al\xe9m disso, adotou-se m\xe9todos de invalida\xe7\xe3o de cache para garantir informa\xe7\xf5es atualizadas e armazenou-se o DOM de micro-frontends em caches in-memory, evitando composi\xe7\xe3o excessiva a cada requisi\xe7\xe3o."]})]})})]}),(0,o.jsx)(i.u0,{children:(0,o.jsx)(i.Yj,{children:(0,o.jsxs)("div",{className:"d-grid gap-2 d-md-flex justify-content-md-end",children:[(0,o.jsx)(i.uE,{color:"primary",className:"me-md-2",children:"Voltar"}),(0,o.jsx)(i.uE,{color:"primary",children:"Avan\xe7ar"})]})})})]})})},5648:()=>{}}]);
//# sourceMappingURL=200.522ee027.chunk.js.map