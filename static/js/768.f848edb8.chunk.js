"use strict";(self.webpackChunkgam=self.webpackChunkgam||[]).push([[768],{7924:(e,a,o)=>{o.r(a),o.d(a,{default:()=>d});var s=o(3084);o(9060);const r=o.p+"static/media/evolucao.7615cd630be5880c09a1.webp",i=o.p+"static/media/team_autonomos.980ecfc9f5b083956858.webp";var n=o(2496);const d=()=>(0,n.jsx)(s.AX,{className:"mb-4",children:(0,n.jsxs)(s.oV,{xs:12,children:[(0,n.jsxs)(s.u0,{className:"mb-4",children:[(0,n.jsx)(s.Q_,{children:(0,n.jsx)("strong",{children:"Introdu\xe7\xe3o"})}),(0,n.jsxs)(s.Yj,{children:[(0,n.jsx)("h4",{children:"Micro Frontends"}),(0,n.jsx)("p",{children:"Com o tamanho e complexidade do sistema de software, \xe9 comum utilizar principalmente uma arquitetura monol\xedtica, uma arquitetura frontend e backend ou uma arquitetura de microsservi\xe7os. Para sistemas de software grandes e complexos, a tend\xeancia atual \xe9 construir um aplicativo de navegador rico em recursos e poderoso, tamb\xe9m conhecido como aplicativo de p\xe1gina \xfanica (SPA), que se baseia em uma arquitetura de microsservi\xe7os."}),(0,n.jsx)("p",{children:"Nesse cen\xe1rio, h\xe1 equipes separadas para implementa\xe7\xf5es de backend para cada funcionalidade. Elas constroem seus pr\xf3prios microsservi\xe7os de backend para as funcionalidades espec\xedficas, e a equipe de frontend precisa trabalhar em rela\xe7\xe3o a todas as caracter\xedsticas."}),(0,n.jsx)("p",{children:"Com o tempo, a camada de frontend, frequentemente desenvolvida por uma equipe separada, cresce e se torna mais dif\xedcil de manter. Isso \xe9 o que chamamos de um Frontend Monol\xedtico."}),(0,n.jsx)("p",{children:"A ideia por tr\xe1s dos Micro Frontends \xe9 pensar em um site ou aplicativo da web como uma composi\xe7\xe3o de recursos de propriedade de equipes independentes."}),(0,n.jsx)("img",{src:r,alt:"Evolu\xe7\xe3o",className:"img-fluid mb-3"}),(0,n.jsx)("h4",{children:"Ideias Principais dos Micro Frontends"}),(0,n.jsx)("h5",{children:"1. Ser Tecnologicamente Neutro"}),(0,n.jsx)("p",{children:"Cada equipe deve poder escolher e atualizar sua pilha tecnol\xf3gica sem precisar coordenar com outras equipes. Os Elementos Personalizados (Custom Elements) s\xe3o uma \xf3tima maneira de ocultar detalhes de implementa\xe7\xe3o, fornecendo uma interface neutra para os outros."}),(0,n.jsx)("h5",{children:"2. Isolar o C\xf3digo da Equipe"}),(0,n.jsx)("p",{children:"N\xe3o compartilhe um tempo de execu\xe7\xe3o, mesmo que todas as equipes usem o mesmo framework. Construa aplicativos independentes que sejam autocontidos. N\xe3o dependa de estados compartilhados ou vari\xe1veis globais."}),(0,n.jsx)("h5",{children:"3. Preferir Recursos Nativos do Navegador em Vez de APIs Personalizadas"}),(0,n.jsx)("p",{children:"Utilize eventos do navegador para comunica\xe7\xe3o, em vez de construir um sistema global de publica\xe7\xe3o e assinatura (PubSub). Se realmente for necess\xe1rio criar uma API entre equipes, tente mant\xea-la o mais simples poss\xedvel."}),(0,n.jsx)("h5",{children:"4. Construir um Site Resiliente"}),(0,n.jsx)("p",{children:"Sua funcionalidade deve ser \xfatil mesmo se o JavaScript falhar ou ainda n\xe3o tiver sido executado. Use Renderiza\xe7\xe3o Universal e Aprimoramento Progressivo para melhorar o desempenho percebido."}),(0,n.jsx)("h4",{children:"Benef\xedcios dos Micro Frontends"}),(0,n.jsx)("h5",{children:"1. Atualiza\xe7\xf5es Incrementais"}),(0,n.jsx)("p",{children:"Para muitas organiza\xe7\xf5es, isso marca o in\xedcio de sua jornada com micro frontends. O antigo e grande mon\xf3lito frontend est\xe1 sendo segurado por uma pilha tecnol\xf3gica ultrapassada ou por c\xf3digo escrito sob press\xe3o de entrega, e est\xe1 chegando ao ponto em que uma reescrita total \xe9 tentadora. Para evitar os perigos de uma reescrita completa, preferimos estrangular a aplica\xe7\xe3o antiga peda\xe7o por peda\xe7o e, ao mesmo tempo, continuar entregando novos recursos aos nossos clientes sem sermos sobrecarregados pelo mon\xf3lito."}),(0,n.jsx)("p",{children:"Isso frequentemente leva a uma arquitetura de micro frontends. Uma vez que uma equipe tem a experi\xeancia de levar um recurso at\xe9 a produ\xe7\xe3o com pouca modifica\xe7\xe3o no mundo antigo, outras equipes tamb\xe9m v\xe3o querer se juntar ao novo mundo. O c\xf3digo existente ainda precisa ser mantido, e em alguns casos pode fazer sentido continuar adicionando novos recursos a ele, mas agora a escolha est\xe1 dispon\xedvel."}),(0,n.jsx)("p",{children:"O resultado final aqui \xe9 que temos mais liberdade para tomar decis\xf5es caso a caso em partes individuais do nosso produto e fazer atualiza\xe7\xf5es incrementais em nossa arquitetura, depend\xeancias e experi\xeancia do usu\xe1rio. Se houver uma grande altera\xe7\xe3o em nosso framework principal, cada micro frontend pode ser atualizado quando fizer sentido, em vez de sermos obrigados a parar tudo e atualizar tudo de uma vez. Se quisermos experimentar com nova tecnologia ou novos modos de intera\xe7\xe3o, podemos faz\xea-lo de maneira mais isolada do que antes."}),(0,n.jsx)("h5",{children:"2. Codebases Simples e Desacopladas"}),(0,n.jsx)("p",{children:"O c\xf3digo-fonte de cada micro frontend individual ser\xe1, por defini\xe7\xe3o, muito menor do que o c\xf3digo-fonte de um frontend monol\xedtico \xfanico. Essas codebases menores tendem a ser mais simples e mais f\xe1ceis para os desenvolvedores trabalharem. Em particular, evitamos a complexidade decorrente de acoplamento n\xe3o intencional e inadequado entre componentes que n\xe3o deveriam conhecer uns aos outros. Ao desenhar linhas mais espessas em torno dos contextos delimitados da aplica\xe7\xe3o, tornamos mais dif\xedcil que esse acoplamento acidental surja."}),(0,n.jsx)("h5",{children:"3. Implanta\xe7\xe3o Independente"}),(0,n.jsx)("p",{children:"Assim como acontece com microsservi\xe7os, a implantabilidade independente de micro frontends \xe9 fundamental. Isso reduz o escopo de qualquer implanta\xe7\xe3o espec\xedfica, o que, por sua vez, reduz o risco associado. Independentemente de como ou onde seu c\xf3digo frontend \xe9 hospedado, cada micro frontend deve ter sua pr\xf3pria linha de entrega cont\xednua, que o constr\xf3i, testa e implanta at\xe9 a produ\xe7\xe3o. Devemos ser capazes de implantar cada micro frontend com muito pouco pensamento dado ao estado atual de outras codebases ou pipelines. N\xe3o deve importar se o antigo mon\xf3lito est\xe1 em um ciclo de lan\xe7amento trimestral fixo e manual, ou se a equipe ao lado inseriu um recurso meio finalizado ou quebrado em seu branch principal. Se um determinado micro frontend estiver pronto para ir para a produ\xe7\xe3o, ele deve ser capaz de faz\xea-lo, e essa decis\xe3o deve caber \xe0 equipe que o construiu e mant\xe9m."}),(0,n.jsx)("img",{src:i,alt:"Times Aut\xf4nomos",className:"img-fluid mb-3"}),(0,n.jsx)("h4",{children:"Equipes Aut\xf4nomas"}),(0,n.jsx)("p",{children:"Como benef\xedcio de ordem superior ao desacoplar tanto nossas codebases quanto nossos ciclos de lan\xe7amento, avan\xe7amos significativamente em dire\xe7\xe3o a ter equipes totalmente independentes, capazes de possuir uma se\xe7\xe3o de um produto desde a concep\xe7\xe3o at\xe9 a produ\xe7\xe3o e al\xe9m. As equipes podem ter a propriedade completa de tudo o que precisam para entregar valor aos clientes, o que lhes permite se movimentar rapidamente e de forma eficaz. Para que isso funcione, nossas equipes precisam ser formadas em torno de fatias verticais de funcionalidade de neg\xf3cios, em vez de capacidades t\xe9cnicas. Uma maneira f\xe1cil de fazer isso \xe9 dividir o produto com base no que os usu\xe1rios finais ver\xe3o, para que cada micro frontend encapsule uma \xfanica p\xe1gina da aplica\xe7\xe3o e seja totalmente de propriedade de uma \xfanica equipe. Isso traz uma maior coes\xe3o ao trabalho das equipes do que se as equipes fossem formadas em torno de preocupa\xe7\xf5es t\xe9cnicas horizontais como estilo, formul\xe1rios ou valida\xe7\xe3o."}),(0,n.jsx)("h4",{children:"Desvantagens dos Micro Frontends"}),(0,n.jsx)("h5",{children:"1. Tamanho do Payload"}),(0,n.jsx)("p",{children:"Os pacotes JavaScript independentemente constru\xeddos podem causar duplica\xe7\xe3o de depend\xeancias comuns, aumentando a quantidade de bytes que precisamos enviar pela rede para nossos usu\xe1rios finais. Por exemplo, se cada micro frontend incluir sua pr\xf3pria c\xf3pia do React, estaremos obrigando nossos clientes a baixar o React n vezes. Existe uma rela\xe7\xe3o direta entre o desempenho da p\xe1gina e o envolvimento/convers\xe3o do usu\xe1rio, e grande parte do mundo funciona em infraestrutura de internet muito mais lenta do que aquelas em cidades altamente desenvolvidas est\xe3o acostumadas, ent\xe3o temos muitas raz\xf5es para nos preocupar com os tamanhos de download."}),(0,n.jsx)("p",{children:"Esta quest\xe3o n\xe3o \xe9 f\xe1cil de resolver. Existe uma tens\xe3o inerente entre nosso desejo de permitir que as equipes compilarem suas aplica\xe7\xf5es de forma independente para que possam trabalhar autonomamente, e nosso desejo de construir nossas aplica\xe7\xf5es de uma forma que elas possam compartilhar depend\xeancias comuns. Uma abordagem \xe9 externalizar depend\xeancias comuns de nossos pacotes compilados, como descrevemos para a aplica\xe7\xe3o de demonstra\xe7\xe3o. No entanto, assim que seguimos por esse caminho, reintroduzimos algum acoplamento de constru\xe7\xe3o aos nossos micro frontends. Agora h\xe1 um contrato impl\xedcito entre eles que diz: todos n\xf3s devemos usar exatamente essas vers\xf5es dessas depend\xeancias. Se houver uma altera\xe7\xe3o incompat\xedvel em uma depend\xeancia, podemos acabar precisando de um grande esfor\xe7o coordenado de atualiza\xe7\xe3o e um evento de lan\xe7amento pontual. Isso \xe9 exatamente o que est\xe1vamos tentando evitar com os micro frontends em primeiro lugar!"}),(0,n.jsx)("p",{children:"Esta tens\xe3o inerente \xe9 dif\xedcil, mas nem tudo s\xe3o m\xe1s not\xedcias. Em primeiro lugar, mesmo que escolhamos n\xe3o fazer nada em rela\xe7\xe3o a depend\xeancias duplicadas, \xe9 poss\xedvel que cada p\xe1gina individual ainda carregue mais r\xe1pido do que se tiv\xe9ssemos constru\xeddo um \xfanico frontend monol\xedtico. A raz\xe3o \xe9 que, compilando cada p\xe1gina independentemente, efetivamente implementamos nossa pr\xf3pria forma de divis\xe3o de c\xf3digo. Em monolitos cl\xe1ssicos, quando qualquer p\xe1gina da aplica\xe7\xe3o \xe9 carregada, frequentemente baixamos o c\xf3digo-fonte e as depend\xeancias de todas as p\xe1ginas de uma vez. Ao construir independentemente, qualquer carregamento de p\xe1gina \xfanico s\xf3 baixar\xe1 o c\xf3digo-fonte e as depend\xeancias dessa p\xe1gina. Isso pode resultar em carregamentos iniciais de p\xe1gina mais r\xe1pidos, mas navega\xe7\xf5es subsequentes mais lentas, j\xe1 que os usu\xe1rios s\xe3o for\xe7ados a baixar as mesmas depend\xeancias em cada p\xe1gina. Se formos disciplinados em n\xe3o inflar nossos micro frontends com depend\xeancias desnecess\xe1rias, ou se soubermos que os usu\xe1rios geralmente se limitam a uma ou duas p\xe1ginas dentro da aplica\xe7\xe3o, podemos alcan\xe7ar um ganho l\xedquido em termos de desempenho, mesmo com depend\xeancias duplicadas."}),(0,n.jsx)("p",{children:"H\xe1 muitos pode ser e possivelmente no par\xe1grafo anterior, o que destaca o fato de que cada aplica\xe7\xe3o sempre ter\xe1 suas pr\xf3prias caracter\xedsticas de desempenho exclusivas. Se voc\xea quiser ter certeza dos impactos de desempenho de uma altera\xe7\xe3o espec\xedfica, n\xe3o h\xe1 substituto para medi\xe7\xf5es do mundo real, idealmente em produ\xe7\xe3o. J\xe1 vimos equipes agonizarem por alguns quilobytes extras de JavaScript, apenas para baixar muitos megabytes de imagens de alta resolu\xe7\xe3o ou executar consultas caras em um banco de dados muito lento. Portanto, embora seja importante considerar os impactos de desempenho de cada decis\xe3o arquitet\xf4nica, certifique-se de saber onde est\xe3o os gargalos reais."}),(0,n.jsx)("h5",{children:"2. Diferen\xe7as Ambientais"}),(0,n.jsx)("p",{children:"Dever\xedamos ser capazes de desenvolver um \xfanico micro frontend sem precisar pensar em todos os outros micro frontends sendo desenvolvidos por outras equipes. Podemos at\xe9 conseguir executar nosso micro frontend no modo independente, em uma p\xe1gina em branco, em vez de dentro da aplica\xe7\xe3o cont\xeainer que o abrigar\xe1 na produ\xe7\xe3o. Isso pode simplificar bastante o desenvolvimento, especialmente quando o cont\xeainer real \xe9 um c\xf3digo legado e complexo, o que geralmente ocorre quando usamos micro frontends para realizar uma migra\xe7\xe3o gradual do antigo para o novo. No entanto, existem riscos associados ao desenvolvimento em um ambiente que \xe9 bastante diferente da produ\xe7\xe3o. Se o cont\xeainer durante o desenvolvimento se comportar de maneira diferente do cont\xeainer de produ\xe7\xe3o, podemos descobrir que nosso micro frontend est\xe1 quebrado ou se comporta de maneira diferente quando implantamos na produ\xe7\xe3o. De particular preocupa\xe7\xe3o s\xe3o estilos globais que podem ser trazidos pelo cont\xeainer ou por outros micro frontends."}),(0,n.jsx)("p",{children:"A solu\xe7\xe3o aqui n\xe3o \xe9 muito diferente de qualquer outra situa\xe7\xe3o em que precisamos nos preocupar com diferen\xe7as ambientais. Se estamos desenvolvendo localmente em um ambiente que n\xe3o \xe9 semelhante \xe0 produ\xe7\xe3o, precisamos garantir que integremos e implantemos regularmente nosso micro frontend em ambientes semelhantes \xe0 produ\xe7\xe3o e devemos realizar testes (manuais e automatizados) nesses ambientes para identificar problemas de integra\xe7\xe3o o mais cedo poss\xedvel. Isso n\xe3o resolver\xe1 completamente o problema, mas, em \xfaltima an\xe1lise, \xe9 mais um trade-off que temos que considerar: a vantagem de um ambiente de desenvolvimento simplificado vale o risco de problemas de integra\xe7\xe3o? A resposta depender\xe1 do projeto!"}),(0,n.jsx)("h5",{children:"3. Complexidade Operacional e de Governan\xe7a"}),(0,n.jsx)("p",{children:"A \xfaltima desvantagem tem um paralelo direto com microsservi\xe7os. Como uma arquitetura mais distribu\xedda, os micro frontends inevitavelmente levar\xe3o a ter mais coisas para gerenciar \u2014 mais reposit\xf3rios, mais ferramentas, mais pipelines de constru\xe7\xe3o/implanta\xe7\xe3o, mais servidores, mais dom\xednios, etc. Ent\xe3o, antes de adotar tal arquitetura, h\xe1 algumas perguntas que voc\xea deve considerar:"}),(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:"Voc\xea tem automa\xe7\xe3o suficiente para provisionar e gerenciar a infraestrutura adicional necess\xe1ria de forma vi\xe1vel?"}),(0,n.jsx)("li",{children:"Seus processos de desenvolvimento, teste e lan\xe7amento de frontend ser\xe3o dimensionados para muitas aplica\xe7\xf5es?"}),(0,n.jsx)("li",{children:"Voc\xea est\xe1 confort\xe1vel com as decis\xf5es em torno de ferramentas e pr\xe1ticas de desenvolvimento se tornando mais descentralizadas e menos control\xe1veis?"}),(0,n.jsx)("li",{children:"Como voc\xea garantir\xe1 um n\xedvel m\xednimo de qualidade, consist\xeancia ou governan\xe7a em todas as suas muitas codebases frontend independentes?"})]}),(0,n.jsxs)("p",{className:"mt-5",children:[(0,n.jsx)("h4",{children:"Refer\xeancias"}),(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:"https://micro-frontends.org"}),(0,n.jsx)("li",{children:"https://martinfowler.com/articles/micro-frontends.html"}),(0,n.jsx)("li",{children:"https://medium.com/@rajithacharith/introduction-to-micro-frontends-283aa1e126c5"})]})]})]})]}),(0,n.jsx)(s.u0,{children:(0,n.jsx)(s.Yj,{children:(0,n.jsxs)("div",{className:"d-grid gap-2 d-md-flex justify-content-md-end",children:[(0,n.jsx)(s.uE,{color:"primary",className:"me-md-2",children:"Voltar"}),(0,n.jsx)(s.uE,{color:"primary",children:"Avan\xe7ar"})]})})})]})})}}]);
//# sourceMappingURL=768.f848edb8.chunk.js.map