{"version":3,"file":"static/js/747.87baf2f6.chunk.js","mappings":"2OAKA,MAwHA,EAxHgC,KAE5B,SAAC,KAAD,WACE,UAAC,KAAD,CAAMA,GAAI,GAAV,WACE,UAAC,KAAD,CAAOC,UAAU,OAAjB,WACE,SAAC,KAAD,WACE,4BAAQ,WAEV,SAAC,KAAD,WACA,gCACM,wBAAI,8BACJ,uBAAG,gaAOH,2BACI,2BACI,4BAAQ,qCACR,2BACI,2BAAI,wBAAI,cAAc,kMAEtB,yBAAI,wBAAI,4BACR,2BACI,wBAAI,2LAEJ,wBAAI,0LAEJ,wBAAI,mNAEJ,wBAAI,0MAMhB,iBAAKA,UAAU,WAAf,WACE,4BAAQ,wBAAyB,qvBASnC,2BACI,4BAAQ,mCACR,2BACI,2BAAI,wBAAI,cAAc,uJAEtB,yBAAI,wBAAI,4BACR,2BACI,wBAAI,qIAEJ,wBAAI,mLAEJ,wBAAI,gKAIZ,iBAAKA,UAAU,WAAf,WACE,4BAAQ,wBAAyB,ufAQvC,2BACI,4BAAQ,+BACR,2BACI,2BAAI,wBAAI,cAAc,kKAEtB,yBAAI,wBAAI,4BACR,2BACI,wBAAI,2JAEJ,wBAAI,iLAEJ,wBAAI,uLAEJ,wBAAI,sLAOhB,iBAAKA,UAAU,WAAf,WACE,4BAAQ,wBAAyB,+lBAY/C,SAAC,KAAD,WACM,SAAC,KAAD,WACA,iBAAKA,UAAU,gDAAf,WACQ,SAAC,KAAD,CAASC,MAAM,UAAUD,UAAU,UAAnC,SAA6C,YAG7C,SAAC,KAAD,CAASC,MAAM,UAAf,SAAyB,0B","sources":["views/gam/viabilidades/ViabilidadesTecnicasGam.js"],"sourcesContent":["import { CCard, CCardBody, CCardHeader, CCol, CRow, CButton } from '@coreui/react';\nimport React from 'react';\n\nimport '../../../scss/_custom.scss';\n\nconst ViabilidadesTecnicasGam = () => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>GAM</strong>\n          </CCardHeader>\n          <CCardBody>\n          <section>\n                <h3>Viabilidades Técnicas</h3>\n                <p>\n                O Estudo de Viabilidade, no contexto das diretrizes para adoção de Micro-Frontends (GAM), \n                é uma fase estratégica e sequencial que busca analisar as viabilidades gerenciais e técnicas \n                antes de decidir pela implementação da arquitetura de Micro-Frontends. \n                Essa abordagem visa garantir uma transição suave e bem-sucedida para essa arquitetura inovadora. A imagem abaixo demostra o fluxo\n                </p>\n\n                <ul>\n                    <li>\n                        <strong>Compatibilidade Tecnológica:</strong>\n                        <ul>\n                            <li><em>Objetivo:</em> Garantir que a arquitetura de Micro-Frontends seja compatível com as tecnologias existentes na\n                                infraestrutura da empresa, minimizando conflitos e promovendo uma transição suave.</li>\n                            <li><em>Recomendações:</em></li>\n                            <ul>\n                                <li>Avaliação da Infraestrutura Atual: Realizar uma análise detalhada da infraestrutura tecnológica existente,\n                                    identificando as tecnologias, frameworks e bibliotecas em uso.</li>\n                                <li>Identificação de Conflitos Potenciais: Identificar possíveis conflitos entre as tecnologias utilizadas\n                                    atualmente e aquelas associadas à arquitetura de Micro-Frontends.</li>\n                                <li>Padronização de Tecnologias: Considerar a padronização de tecnologias que são comuns tanto na infraestrutura\n                                    atual quanto na arquitetura de Micro-Frontends para facilitar a integração.</li>\n                                <li>Testes de Compatibilidade: Implementar testes específicos usando o projeto piloto para verificar a\n                                    compatibilidade entre os componentes de Micro-Frontends e a infraestrutura existente.</li>\n                            </ul>\n                        </ul>\n                    </li>\n\n                    <div className=\"blue-box\">\n                      <strong>Exemplo Prático:</strong> Suponha que a empresa utilize o Angular como framework principal em seus sistemas\n                      existentes. Ao iniciar a adoção de Micro-Frontends, a equipe de análise de compatibilidade avalia a versão\n                      específica do Angular em uso e confirma sua compatibilidade com os requisitos do Micro-Frontend. Além disso, ao\n                      identificar a necessidade de uma biblioteca de gerenciamento de estado, a equipe opta por padronizar o uso do\n                      Redux, que é amplamente aceito tanto na infraestrutura atual quanto na arquitetura de Micro-Frontends. Durante\n                      o projeto piloto, são conduzidos testes específicos para verificar a interoperabilidade entre os Micro-Frontends\n                      e os serviços legados, garantindo uma transição suave e minimizando conflitos.\n                    </div>\n        \n                    <li>\n                        <strong>Desafios de Integração:</strong>\n                        <ul>\n                            <li><em>Objetivo:</em> Identificar e abordar proativamente os desafios de integração que possam surgir durante a\n                                adoção da arquitetura de Micro-Frontends.</li>\n                            <li><em>Recomendações:</em></li>\n                            <ul>\n                                <li>Mapeamento de Interfaces: Realizar um mapeamento claro das interfaces entre os Micro-Frontends e outros\n                                    componentes do sistema.</li>\n                                <li>Definição de Contratos: Estabelecer contratos claros e documentados entre os Micro-Frontends e os serviços\n                                    backend, garantindo consistência nas interações.</li>\n                                <li>Monitoramento Contínuo: Implemente mecanismos de monitoramento contínuo para identificar e resolver\n                                    rapidamente problemas de integração.</li>\n                            </ul>\n                        </ul>\n                        <div className=\"blue-box\">\n                          <strong>Exemplo Prático:</strong> Durante a implementação de Micro-Frontends, um desafio de integração foi identificado\n                                na comunicação entre um Micro-Frontend específico e um serviço backend essencial. Utilizando o mapeamento de\n                                interfaces previamente documentado, a equipe consegue rapidamente diagnosticar o problema e atualizar o contrato\n                                de API. O monitoramento contínuo alerta a equipe sobre a anomalia, permitindo uma intervenção rápida e\n                                minimizando o impacto nos usuários finais.\n                        </div>\n                    </li>\n        \n                    <li>\n                        <strong>Complexidades Funcionais:</strong>\n                        <ul>\n                            <li><em>Objetivo:</em> Entender e mitigar as complexidades funcionais associadas à arquitetura de Micro-Frontends,\n                                garantindo a entrega de funcionalidades de forma eficiente.</li>\n                            <li><em>Recomendações:</em></li>\n                            <ul>\n                                <li>Análise de Requisitos: Realizar uma análise aprofundada dos requisitos funcionais da aplicação,\n                                    identificando possíveis complexidades.</li>\n                                <li>Design Modular: Adote um design modular para os Micro-Frontends, dividindo a aplicação em componentes\n                                    independentes para facilitar o gerenciamento das complexidades.</li>\n                                <li>Testes Unitários e de Integração: Implementar testes unitários e de integração para validar a funcionalidade\n                                    dos Micro-Frontends individualmente e em conjunto.</li>\n                                <li>Documentação Clara: Mantenha uma documentação clara e abrangente que descreva as interações funcionais\n                                    entre os Micro-Frontends e outros componentes.</li>\n                            </ul>\n                            \n                        </ul>\n                        \n                    </li>\n                    <div className=\"blue-box\">\n                      <strong>Exemplo Prático:</strong> Durante a análise de requisitos foi identificado um requisito funcional complexo\n                      relacionado à gestão de permissões de usuários em diferentes Micro-Frontends. Ao adotar um design modular, a\n                      equipe decide criar um Micro-Frontend dedicado exclusivamente à gestão de permissões. Testes unitários e de\n                      integração são implementados para garantir que essa funcionalidade se integre sem problemas aos demais\n                      Micro-Frontends. A documentação clara detalha os fluxos de interação, simplificando a compreensão da\n                      complexidade funcional pela equipe.\n                    </div>\n                </ul>\n                \n            </section>\n          </CCardBody>\n        </CCard>\n        <CCard>\n              <CCardBody>\n              <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                      <CButton color=\"primary\" className=\"me-md-2\">\n                        Voltar\n                      </CButton>\n                      <CButton color=\"primary\">Avançar</CButton>\n              </div>\n              </CCardBody>\n              </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default ViabilidadesTecnicasGam\n"],"names":["xs","className","color"],"sourceRoot":""}