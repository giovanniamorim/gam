{"version":3,"file":"static/js/838.397cfc0c.chunk.js","mappings":"+JAKA,MAqEA,EArEoCA,KAE5BC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAAAC,UACDC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,GAAI,GAAGH,SAAA,EACTF,EAAAA,EAAAA,KAACM,EAAAA,GAAK,CAACC,UAAU,OAAML,UACnBF,EAAAA,EAAAA,KAACQ,EAAAA,GAAS,CAAAN,UACNC,EAAAA,EAAAA,MAAA,WAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,sBACJF,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KAAAE,SAAG,olBAEHF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,sBACJC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACIC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EAAIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,cAAkB,6HAC9BC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EAAIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,0BACRC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,4JACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,+IACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,mbAIhBC,EAAAA,EAAAA,MAAA,OAAKI,UAAU,WAAUL,SAAA,CAAC,KAACF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,yBAA0B,2iBAE7DF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,uBACJC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACIC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EAAIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,cAAkB,mHAC9BC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EAAIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,0BACRC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,yGACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,8HACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,qVAGZC,EAAAA,EAAAA,MAAA,OAAKI,UAAU,WAAUL,SAAA,CAAC,KAACF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,yBAA0B,onBAGjEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,oBACJC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACIC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EAAIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,cAAkB,+GAC9BC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EAAIF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,0BACRC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,2OACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,+IACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,qMAGZC,EAAAA,EAAAA,MAAA,OAAKI,UAAU,WAAUL,SAAA,CAAC,KAACF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,yBAA0B,uwBAO7EF,EAAAA,EAAAA,KAACM,EAAAA,GAAK,CAAAJ,UACFF,EAAAA,EAAAA,KAACQ,EAAAA,GAAS,CAAAN,UACNC,EAAAA,EAAAA,MAAA,OAAKI,UAAU,gDAA+CL,SAAA,EAC1DF,EAAAA,EAAAA,KAACS,EAAAA,GAAO,CAACC,MAAM,UAAUH,UAAU,UAASL,SAAC,YAG7CF,EAAAA,EAAAA,KAACS,EAAAA,GAAO,CAACC,MAAM,UAASR,SAAC,0B","sources":["views/gam/expansao/ExpansaoManutenibilidadeGam.js"],"sourcesContent":["import { CCard, CCardBody, CCardHeader, CCol, CRow, CButton } from '@coreui/react';\nimport React from 'react';\n\nimport '../../../scss/_custom.scss';\n\nconst ExpansaoManutenibilidadeGam = () => {\n    return (\n        <CRow>\n            <CCol xs={12}>\n                <CCard className=\"mb-4\">\n                    <CCardBody>\n                        <section>\n                            <h4>Manutenibilidade</h4>\n                            <hr />\n                            <p>A ISO/IEC 25010 [40] define a manutenibilidade como a capacidade de um sistema ser modificado, atualizado e adaptado. Suas subcaracterísticas principais incluem Modularidade, Reusabilidade, Analisabilidade, Modificabilidade e Testabilidade. No contexto do Guia de Adoção ao micro-frontend (GAM), a manutenibilidade dá ênfase ao código, adaptamos os conceitos para focar em Analisabilidade, Modificabilidade e Testabilidade, destacando a importância da análise eficiente, modificação eficaz e testagem robusta do código-fonte em ambientes de micro-frontends.</p>\n\n                            <h5>Analisabilidade:</h5>\n                            <ul>\n                                <li><strong>Objetivo:</strong> Compreender a estrutura e funcionamento dos micro-frontends para diagnosticar problemas de forma rápida e precisa.</li>\n                                <li><strong>Recomendações:</strong>\n                                    <ul>\n                                        <li>Padrões de Nomenclatura: Adotar convenções de nomenclatura consistentes para facilitar a identificação e compreensão de componentes.</li>\n                                        <li>Documentação: Manter documentação detalhada sobre a arquitetura, interações e responsabilidades de cada micro-frontend.</li>\n                                        <li>Ferramentas de Análise Estática: Utilizar ferramentas como ESLint e TSLint para análise estática de código, identificando padrões, complexidade e possíveis problemas. Ferramentas mais abrangentes como Sonar podem oferecer uma visão holística da qualidade do código, incluindo métricas de código-fonte, cobertura de código e detecção de possíveis problemas de segurança.</li>\n                                    </ul>\n                                </li>\n                            </ul>\n                            <div className=\"blue-box\"> <strong>Exemplo Prático: </strong> Um desenvolvedor é designado para atualizar a interface da página de detalhes do produto. Durante o processo, o desenvolvedor segue os padrões de nomenclatura, consulta a documentação para entender a estrutura e as interações, enquanto as ferramentas de análise estática (ESLint e TSLint) sinalizam potenciais melhorias no código. O Sonar complementa essa análise, fornecendo métricas detalhadas e identificando áreas de atenção, resultando em modificações eficientes e seguras no micro-frontend.</div>\n\n                            <h5>Modificabilidade:</h5>\n                            <ul>\n                                <li><strong>Objetivo:</strong> Permitir modificações eficientes nos micro-frontends sem introduzir defeitos ou degradar a qualidade.</li>\n                                <li><strong>Recomendações:</strong>\n                                    <ul>\n                                        <li>Design Modular: Estruturar os micro-frontends de forma modular, minimizando acoplamento entre eles.</li>\n                                        <li>Refatoração Contínua: Incentivar práticas de refatoração para manter o código limpo e adaptável.</li>\n                                        <li>Controle de Versão: Utilizar sistemas de controle de versão eficientes, como Git, para rastrear alterações e facilitar reversões se necessário. Ferramentas como o Veracode podem ser incorporadas para realizar análises de segurança estática e dinâmica, ajudando a garantir modificações seguras.</li>\n                                    </ul>\n                                </li>\n                                <div className=\"blue-box\"> <strong>Exemplo Prático: </strong> Uma nova funcionalidade precisa ser adicionada a um dos micro-frontends. Com o design modular, o desenvolvedor pode isolar a implementação da nova funcionalidade sem afetar outras partes do sistema. Durante o processo, práticas contínuas de refatoração garantem que o código permaneça limpo e adaptável. O uso eficiente do controle de versão permite que o desenvolvedor rastreie e gerencie as alterações de maneira organizada. A integração do Veracode verifica possíveis vulnerabilidades de segurança, garantindo modificações seguras antes da implementação.</div>\n                            </ul>\n\n                            <h5>Testabilidade:</h5>\n                            <ul>\n                                <li><strong>Objetivo:</strong> Garantir a efetividade dos testes, permitindo a detecção precoce de falhas e mudanças seguras.</li>\n                                <li><strong>Recomendações:</strong>\n                                    <ul>\n                                        <li>Testes Unitários e de Integração: Implementar testes unitários (usando Jest e Enzyme para React, por exemplo) e de integração para verificar a funcionalidade isolada e a interação entre os micro-frontends.</li>\n                                        <li>Automação de Testes: Utilize ferramentas de automação de testes, como Cypress, para agilizar o processo de verificação.</li>\n                                        <li>Ambientes de Teste Semelhantes à Produção: Manter ambientes de teste que reproduzam fielmente as condições de produção para validar o comportamento real do sistema.</li>\n                                    </ul>\n                                </li>\n                                <div className=\"blue-box\"> <strong>Exemplo Prático: </strong> Uma nova funcionalidade é adicionada a um micro-frontend específico. Os testes unitários garantem que a funcionalidade isolada funcione conforme o esperado, utilizando ferramentas como Jest para validar componentes React. Testes de integração, incorporando ferramentas como Cypress, verificam a interação entre os diferentes micro-frontends. A automação desses testes agiliza o processo de verificação, permitindo que a equipe de desenvolvimento detecte precocemente quaisquer falhas potenciais. Ao manter ambientes de teste semelhantes à produção, a equipe assegura que as condições reais do sistema sejam simuladas, validando de forma abrangente o comportamento do micro-frontend antes da implantação.</div>\n                            </ul>\n\n\n                        </section>\n                    </CCardBody>\n                </CCard>\n                <CCard>\n                    <CCardBody>\n                        <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                            <CButton color=\"primary\" className=\"me-md-2\">\n                                Voltar\n                            </CButton>\n                            <CButton color=\"primary\">Avançar</CButton>\n                        </div>\n                    </CCardBody>\n                </CCard>\n            </CCol>\n        </CRow>\n    )\n}\n\nexport default ExpansaoManutenibilidadeGam\n"],"names":["ExpansaoManutenibilidadeGam","_jsx","CRow","children","_jsxs","CCol","xs","CCard","className","CCardBody","CButton","color"],"sourceRoot":""}