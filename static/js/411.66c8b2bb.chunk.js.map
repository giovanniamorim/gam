{"version":3,"file":"static/js/411.66c8b2bb.chunk.js","mappings":"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","sources":["views/gam/expansao/ExpansaoEscalabilidadeGam.js"],"sourcesContent":["import { CCard, CCardBody, CCardHeader, CCol, CRow, CButton } from '@coreui/react';\nimport React from 'react';\n\nimport '../../../scss/_custom.scss';\n\nconst ExpansaoEscalabilidadeGam = () => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardBody>\n            <section>\n              <h4>Escalabilidade</h4>\n              <hr />\n              <p>Esta etapa visa capacitar a aplicação a crescer de maneira eficiente e adaptar-se às demandas variáveis do ambiente. As principais áreas de foco são a adição de novos micro-frontends, o gerenciamento de carga e as estratégias de cache.</p>\n\n              <h5>Adição de Novos Micro-Frontends:</h5>\n              <ul>\n                <li><strong>Objetivo:</strong> Facilitar a incorporação de novos micro-frontends ao sistema existente.</li>\n                <li><strong>Recomendações:</strong>\n                  <ul>\n                    <li>Modularização Dinâmica: Desenvolver arquitetura modular que suporte a adição dinâmica de novos micro-frontends sem impactar os existentes.</li>\n                    <li>Balanceamento de Carga: Implementar sistema de balanceamento de carga automático como serviços de orquestração, usando ferramentas como Kubernetes, para facilitar o dimensionamento automático com base nas métricas de tráfego.</li>\n                    <li>Gestão de Cache: Adote estratégias de cache, como Redis, para armazenar temporariamente as respostas de micro-serviços, melhorando o throughput da composição de micro-frontends. Explore o armazenamento de DOM de micro-frontends em caches in-memory para reduzir a necessidade de recomposição a cada requisição.</li>\n                  </ul>\n                </li>\n              </ul>\n              <div className=\"blue-box\"> <strong>Exemplo Prático: </strong>\n                Em um cenário de comércio eletrônico baseado em micro-frontends, um novo micro-frontend chamado\n                &quot;Recomendações Personalizadas&quot; foi adicionado. Implementa-se um sistema de balanceamento de carga automático com Kubernetes para escalabilidade dinâmica com base no tráfego. Para aprimorar o desempenho, utiliza-se estratégias de cache, incluindo Redis, para armazenar temporariamente respostas de micro-serviços e o DOM de micro-frontends em caches in-memory, reduzindo a necessidade de recomposição a cada requisição.</div>\n\n              <h5>Gerenciamento de Carga:</h5>\n              <ul>\n                <li><strong>Objetivo:</strong> Garantir a eficiência operacional e o desempenho otimizado da aplicação, mesmo diante de demandas crescentes.</li>\n                <li><strong>Recomendações:</strong>\n                  <ul>\n                    <li>Autoescalabilidade na Nuvem: Utilize funcionalidades de autoescalabilidade oferecidas por provedores de nuvem para ajustar dinamicamente a infraestrutura com base nos padrões de tráfego. Escolha camadas de computação eficientes, como contêineres, para rápida execução, e considere opções gerenciadas, como serviços serverless, para simplificar a operacionalização da infraestrutura.</li>\n                    <li>Previsão de Carga e Ajuste Manual: Estabelecer uma infraestrutura de linha de base capaz de lidar com cargas previsíveis, como vendas da Black Friday, adotando práticas de comparação entre diferentes serviços e opções plug-and-play.</li>\n                    <li>Otimização de Latência com CDN: Utilizar uma CDN para aumentar a velocidade de entrega das páginas da web, reduzindo a latência entre o cliente e o conteúdo solicitado.</li>\n                  </ul>\n                </li>\n              </ul>\n              <div className=\"blue-box\"> <strong>Exemplo Prático: </strong> Para otimizar o desempenho da plataforma de comércio eletrônico, foi aproveitada a autoescalabilidade na nuvem, utilizando serviços serverless e contêineres para ajustar dinamicamente a infraestrutura com base em padrões de tráfego, garantindo rápida execução e eficiência operacional. Para lidar com picos previsíveis, como as vendas da &quot;Black Friday&quot;, estabeleceu-se uma infraestrutura de linha de base com ajustes manuais quando necessário, utilizando práticas de comparação entre diferentes serviços e opções plug-and-play. Além disso, incorporou-se uma CDN para otimizar a latência, acelerando a entrega de páginas web e aprimorando a experiência do usuário em cenários de alta demanda.</div>\n\n              <h5>Estratégias de Cache:</h5>\n              <ul>\n                <li><strong>Objetivo:</strong> Otimizar o desempenho da aplicação reduzindo a carga nos servidores e acelerando o tempo de resposta.</li>\n                <li><strong>Recomendações:</strong>\n                  <ul>\n                    <li>Cache de Conteúdo Estático: Implementar cache para conteúdo estático, como imagens, folhas de estilo e scripts, reduzindo a latência de carregamento.</li>\n                    <li>Cache de Dados Dinâmicos: Utilizar estratégias de cache para dados dinâmicos, minimizando consultas frequentes ao servidor.</li>\n                    <li>Invalidação de Cache Eficiente: Implementar métodos eficazes de invalidação de cache para garantir que os usuários recebam informações atualizadas.</li>\n                    <li>Cache de Respostas: Implementar caches para armazenar temporariamente as respostas de micro-frontends, utilizando soluções como Redis, armazenando temporariamente as respostas de micro-serviços para aumentar o throughput.</li>\n                    <li>Armazenamento de DOM em Cache: Armazenar o DOM completo de micro-frontends em caches in-memory para evitar composição a cada requisição.</li>\n                  </ul>\n                </li>\n              </ul>\n              <div className=\"blue-box\"> <strong>Exemplo Prático: </strong> Em uma aplicação web, introduziu-se caches para conteúdo estático (imagens e estilos), dados dinâmicos e respostas de micro-frontends e micro-serviços, utilizando soluções como Redis. Essas abordagens reduzem a latência de carregamento, minimizam consultas frequentes aos servidores e aumentam o throughput. Além disso, adotou-se métodos de invalidação de cache para garantir informações atualizadas e armazenou-se o DOM de micro-frontends em caches in-memory, evitando composição excessiva a cada requisição.</div>\n\n\n            </section>\n          </CCardBody>\n        </CCard>\n        <CCard>\n          <CCardBody>\n            <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n              <CButton color=\"primary\" className=\"me-md-2\">\n                Voltar\n              </CButton>\n              <CButton color=\"primary\">Avançar</CButton>\n            </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default ExpansaoEscalabilidadeGam\n"],"names":["ExpansaoEscalabilidadeGam","_jsx","CRow","children","_jsxs","CCol","xs","CCard","className","CCardBody","CButton","color"],"sourceRoot":""}